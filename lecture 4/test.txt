A JavaScript function is a block of code designed to perform a particular task.
A JavaScript function is executed when "something" invokes it (calls it).
Example:
function myFunction(p1, p2) {
  return p1 * p2;
}


A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().
Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)
The code to be executed, by the function, is placed inside curly brackets: {}
function name(parameter1, parameter2, parameter3) { // code to be executed }
Function parameters are listed inside the parentheses () in the function definition.
Function arguments are the values received by the function when it is invoked.
Inside the function, the arguments (the parameters) behave as local variables.


The code inside the function will execute when "something" invokes (calls) the function:
When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)

You can reuse code: Define the code once, and use it many times.
You can use the same code many times with different arguments, to produce different results.
Example: Convert Fahrenheit to celsius.
function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}
document.getElementById("demo").innerHTML = toCelsius(77)

et x = toCelsius(77);
let text = "The temperature is " + x + " Celsius";

OR
let text = "The temperature is " + toCelsius(77) + " Celsius";



jAVASCRIPT DATA TYPES, FUNCTIONS

Data types
// Numbers:
let length = 16;
let weight = 7.5;

// Strings:
let color = "Yellow";
let lastName = "Johnson";

// Booleans
let x = true;
let y = false;

// Object:
const person = {firstName:"John", lastName:"Doe"};

// Array object:
const cars = ["Saab", "Volvo", "BMW"];

// Date object:
const date = new Date("2022-03-25");


JavaScript Objects
JavaScript objects are written with curly braces {}. Object properties are written as name:value pairs, separated by commas.
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
The typeof Operator
You can use the JavaScript typeof operator to find the type of a JavaScript variable.
The typeof operator returns the type of a variable or an expression:
typeof ""	         // Returns "string"
typeof (3 + 4)        // Returns "number"
typeof "John Doe"     // Returns "string"
Undefined
In JavaScript, a variable without a value, has the value undefined. The type is also undefined.
let car;    // Value is undefined, type is undefined



Javascript outputs, variables and syntax
Advantages of External Javascript
lacing scripts in external files has some advantages:
It separates HTML and code
It makes HTML and JavaScript easier to read and maintain
Cached JavaScript files can speed up page loads
To add several script files to one page  - use several script tags:
<script src="myScript1.js"></script> <script src="myScript2.js"></script>
External References
An external script can be referenced in 3 different ways:
With a full URL (a full web address)
With a file path (like /js/)
Without any path
This example uses a full URL: <script src="https://www.w3schools.com/js/myScript.js"></script>
This example uses a file path to link to myScript.js: <script src="/js/myScript.js"></script>


Outputs
JavaScript can "display" data in different ways:
Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().
Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().
Using innerHTML
To access an HTML element, JavaScript can use the document.getElementById(id) method.
The id attribute defines the HTML element. The innerHTML property defines the HTML content:
Using document.write()
For testing purposes, it is convenient to use document.write():
<body><script>document.write(5 + 6);</script></body>


Syntax
Javascript syntax is a set of rules how JS programs are constructed.
// How to create variables:
var x; let y;
// How to use variables:
x = 5; y = 6; let z = x + y;
JavaScript Values
The JavaScript syntax defines two types of values:
Fixed values
Variable values
Fixed values are called Literals.
Variable values are called Variables.

Variables
Variables are Containers for Storing Data. JavaScript Variables can be declared in 4 ways:
Automatically
Using var
Using let
Using const
In this first example, x, y, and z are undeclared variables.
They are automatically declared when first used: x = 5; y = 6; z = x + y;
Note: It is considered good programming practice to always declare variables before use.
From the examples you can guess:
x stores the value 5
y stores the value 6
z stores the value 11



